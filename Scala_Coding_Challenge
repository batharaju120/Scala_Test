import java.time.ZonedDateTime
import java.util.Date
import scala.collection.JavaConverters._


// An item, a type of 'thing' that we sell.
case class Item(id: Int, price: BigDecimal)

// A site 'store or distribution center'
case class Site(id: Int, name: String)

// A message indicating a sale has occurred. inventory leaves the store, sales increases
case class Sale(id: Int, itemsSold: Set[SaleLineItem], siteId: Int, dateTime: ZonedDateTime)
// A given sale can have a multitude of sales line items. Each one contains an item and a count.
case class SaleLineItem(item: Item, count: Int)

// For a given site, the inventory system can send the following messages...
// Inventory reset means that the inventory has been counted and is the defined quantity
case class InventoryReset(item: Item, count: Int, siteId: Int, dateTime: ZonedDateTime)
// Inventory Received indicates that the count of a given item has been received at a given site
case class InventoryReceived(item: Item, count: Int, siteId: Int, dateTime: ZonedDateTime)
// Inventory Sent indicates that the count of a given item has left the site and going somewhere else
case class InventorySent(item: Item, count: Int, siteId: Int, dateTime: ZonedDateTime)

// A total for a given site/date/account.
case class AccountingTotal(siteId: Int, date: Date, accountNumber: Int, amount: BigDecimal)


// The following traits represent the various edge systems that our system will interact with
trait ItemService {
  def getItemDetail(id: Int): Item
}

trait LocationService {
  def getSiteDetail(id: Int): Site
}

trait SaleService {
  def getStream: Stream[Sale]
}

trait InventoryService {
  def getResetStream: Stream[InventoryReset]
  def getReceivedStream: Stream[InventoryReceived]
  def getSentStream: Stream[InventorySent]
}

trait AccountingService {
  def postAccountingTotal(total: AccountingTotal): Boolean
}
